# This is a basic workflow to help you get started with Actions
name: CI-CD-workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  # # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
      # build and test the apps
      - name: build
        run: |
          echo -e "${{ secrets.CLIENT_PRODUCT3 }}" > .env.production
          npm run build

      # Docker image 생성 및 dockerhub에 push
      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v6
        with:
          image: khchoo/team12-react
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_PW }}

      # 서버에서 Docker compose 실행 (docker-compose.yml 파일이 서버에 있어야 함)
      # HOST_DEV = 퍼블릭 IPv4 DNS , USERNAME = ubuntu, KEY = pem 키 전체
      - name: EC2 Docker Run
        uses: appleboy/ssh-action@master # https://github.com/appleboy/ssh-action
        with:
          host: ${{ secrets.ORG_EC2_ADDRESS }}
          username: ${{ secrets.ORG_EC2_USERNAME }}
          key: ${{ secrets.ORG_EC2_PEMKEY }}
          port: 22
          script: |
            sudo usermod -aG docker $USER
            sudo docker image prune -f
            sudo docker ps
            sudo docker images
            sudo docker-compose down
            sudo docker rmi $(docker images -a -q)
            sudo docker ps
            sudo docker images
            sudo docker-compose up -d
